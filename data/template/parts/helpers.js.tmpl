{{ define "helpers.js" }}
    <script type="text/javascript">
    function swapWeapon(id, action) {
        var panel = document.getElementById(id);
        if (panel == undefined) {
            console.log('Unknow panel id:', id);
            return;
        }
        var klasses1 = panel.getElementsByClassName('swap1');
        if (klasses1 == undefined) {
            console.log("Can't get classes: swap1");
            return;
        }
        var klasses2 = panel.getElementsByClassName('swap2');
        if (klasses2 == undefined) {
            console.log("Can't get classes: swap2");
            return;
        }

        switch (action) {
            case 1:
                for (var i = 0; i < klasses1.length; i++) {
                    klasses1[i].style.display="none";
                }
                for (var i = 0; i < klasses2.length; i++) {
                    klasses2[i].style.display="block";
                }
                break;
            case 2:
                for (var i = 0; i < klasses2.length; i++) {
                    klasses2[i].style.display="none";
                }
                for (var i = 0; i < klasses1.length; i++) {
                    klasses1[i].style.display="block";
                }
                break;
            default:
                console.log('unknow action:', action);
                return;
        }
    }

    var noSupport = "Your browser doesn't support local storage :'(";

    function setPriceNote(id, price) {
        if (typeof(Storage) !== "undefined") {
            if (price == "") {
                localStorage.removeItem(id);
            } else {
                localStorage.setItem(id, price);
            }
        } else {
            console.log(noSupport);
            alert(noSupport);
        }
    }

    function getPriceNote(id) {
        if (typeof(Storage) !== "undefined") {
            var price = localStorage.getItem(id);
            if (price == undefined) {
                return ""
            }
            return price;
        } else {
            console.log(noSupport);
        }
        return "";
    }

    function generateToolTipContent(id) {
        var domTooltip = document.getElementById('item-' + id + '-tooltip');
        if (domTooltip != undefined) {
            var items = domTooltip.getElementsByClassName('customPriceContainer');
            if (items.length > 0 && items[0] != undefined) {
                var item = items[0];
                var priceNote = getPriceNote('item-' + id);
                var prices = item.getElementsByClassName('customPrice');
                if (prices.length > 0 && prices[0] != undefined) {
                    var price = prices[0];
                    price.innerHTML = priceNote;
                    if (priceNote != "") {
                            item.style.display = 'block';
                    } else {
                        // Price has been removed
                        item.style.display = 'none';
                    }
                }
            }
            return domTooltip.innerHTML;
        }
        return "";
    }

    function updateToolTipContent(elt, id) {
        elt.setContent(generateToolTipContent(id));
    }

    // Update currency image
    function updateCurrencyThumbnail(id) {
        var thumbnail = document.getElementById(id + '-currency');
        if (thumbnail == undefined) {
            // Socketed gems have no thumbnail
            return;
        }
        var imgThumbnail = document.getElementById(id + '-currency-img');
        var txtThumbnail = document.getElementById(id + '-currency-span');
        var priceNote = getPriceNote(id);
        if (priceNote == "") {
            thumbnail.style.display = 'none';
        } else {
            thumbnail.style.display = 'block';
            var words = priceNote.split(' ');
            switch (words[2]) {
                case "chaos":
                    imgThumbnail.src = 'https://web.poecdn.com/image/Art/2DItems/Currency/CurrencyRerollRare.png?scale=1&w=1&h=1&v=c60aa876dd6bab31174df91b1da1b4f9'
                    break;
                case "alch":
                    imgThumbnail.src = 'https://web.poecdn.com/image/Art/2DItems/Currency/CurrencyUpgradeToRare.png?scale=1&w=1&h=1&v=89c110be97333995522c7b2c29cae728'
                    break;
                case "exa":
                    imgThumbnail.src = 'https://web.poecdn.com/image/Art/2DItems/Currency/CurrencyAddModToRare.png?scale=1&w=1&h=1&v=1745ebafbd533b6f91bccf588ab5efc5'
                    break;
            }
            txtThumbnail.innerHTML = '<small>x</small>' + words[1];
        }
    }

    function openWindowWithPost(text) {
        var f = document.getElementById('estimate-form');
        f.itemtext.value = text;
        window.open('', 'estimation');
        f.submit();
    }

    function selectDropdownOptionByName(dropdown, name) {
        for (var i = 0; i < dropdown.options.length; i++) {
            if (dropdown.options[i].value == name) {
                dropdown.selectedIndex = i;
                break;
            }
        }
    }

    function openModal(id, objectName, objectAltName, desc) {
        var modal = document.getElementById('modal');
        var container = document.getElementById('main-container');
        var name = document.getElementById('item-name');
        var estimate = document.getElementById('modal-estimate');
        var submit = document.getElementById('modal-submit');
        var modalPrice = document.getElementById('modal-price');
        var modalCurrency = document.getElementById('modal-currency');
        var currentPrice = getPriceNote(id);
        if (currentPrice != "") {
            var words = currentPrice.split(' ');
            modalPrice.value = words[1];
            selectDropdownOptionByName(modalCurrency, words[2]);
        }

        var header =  "";
        if (objectName != "") {
           header = objectName + " - ";
        }
        if (objectAltName != "") {
            header += objectAltName;
        }
        name.innerHTML = header;
        modal.className = "modal";
        container.className = "desactivate";
        submit.onclick = function(event) {
            modal.className = "modal hidden";
            container.className = "";
            var currency = modalCurrency.options[modalCurrency.selectedIndex];
            var note = "~price " + modalPrice.value + " " + currency.value;
            if (modalPrice.value == "") {
                setPriceNote(id, "");
            } else {
                setPriceNote(id, note);
            }
            // cleanCache();
            updateCurrencyThumbnail(id);
        }
        estimate.onclick = function(event) {
            var item = document.getElementById(id);
            if (item != undefined) {
                var desc = item.getAttribute("data-desc");
                if (desc != undefined) {
                    openWindowWithPost(desc)
                }
            }
        }
    }

    function openWaitModal() {
        var modal = document.getElementById('wait-modal');
        var container = document.getElementById('main-container');
        modal.className = "modal";
        container.className = "desactivate";
    }


    function initModal() {
        var modal = document.getElementById('modal');
        var close = document.getElementById('closeModal');
        var container = document.getElementById('main-container');

        if (modal == undefined || close == undefined || container == undefined) {
            return;
        }

        // Click on close button
        close.onclick = function(event) {
            modal.className = "modal hidden";
            container.className = "";
        }
        // Click outside of the modal
        window.onclick = function(event) {
            if (event.target == modal) {
                modal.className = "modal hidden";
                container.className = "";
            }
        }
    }

    function copyStringToClipboard(str) {
        var el = document.createElement('textarea');
        el.value = str;
        // Set non-editable to avoid focus and move outside of view
        el.setAttribute('readonly', '');
        el.style = {position: 'absolute', left: '-9999px'};
        document.body.appendChild(el);
        el.select();
        document.execCommand('copy');
        document.body.removeChild(el);
    }

    function toInt(str) {
        var parsed = parseInt(str, 10);
        if (isNaN(parsed)) {
            return 0;
        }
        return parsed;
    }

    // Returns the real value.
    function realValue(desc) {
        var words = desc.split(' ');
        return toInt(words[1]);
    }

    // Returns the real type.
    function realType(desc) {
        var words = desc.split(' ');
        return words[2];
    }

    // Receive a desc like "~price <value> >currency>"
    // and extract the value.
    function valueFromDesc(desc) {
        var res = 0;
        var words = desc.split(' ');
        switch (words[2]) {
            case "chaos":
                res = 10000;
                break;
            case "alch":
                res = 1000;
                break;
            case "exa":
                res = 100000;
                break;
        }

        return res + toInt(words[1]);
    }


    function generateShop() {
        var dict = {};
        var items = document.getElementsByClassName('newItemContainer');
        // Retrieve all sellable objects
        for (var i = 0; i < items.length; i++) {
            var desc = items[i].getAttribute("data-sell");
            if (desc != undefined) {
                var price = getPriceNote(items[i].id);
                if (price != "") {
                    var value = valueFromDesc(price);
                    if (dict[value] == undefined) {
                        dict[value] = [];
                    }
                    dict[value].push({
                        'desc': desc,
                        'price': price,
                        'realvalue': realValue(price),
                        'realtype': realType(price),
                    });
                }
            }
        }

        // Construct shop list regrouped and sorted by prices
        var text = 'Welcome to my shop !\n\n';
        var summary = "\n\nSell summary:\n";
        var count = {};
        for (var value in dict) {
            var items = dict[value];
            // Here, we are guaranted to have at least one element
            // and all of them should have the same price note.
            var price = items[0].price;
            var realtype = items[0].realtype;
            var realvalue = items[0].realvalue;
            // Compute summary
            var sum = items.length * realvalue;
            summary += " * " + items.length + " items at " +
                + realvalue + " " + realtype +
                " = " + sum + "\n";
            if (count[realtype] == undefined) {
                count[realtype] = {'sum': 0, 'nb': 0};
            }
            count[realtype].sum += sum;
            count[realtype].nb += items.length;
            text += '[spoiler="' + price + '"]\n';
            for (var i = 0; i < items.length; i++) {
                text += items[i].desc + "\n";
            }
            text += "[/spoiler]\n";
        }
        text += summary;
        var nbTotal = 0;
        var breakdown = "";
        for (var si in count) {
            breakdown += " * " + count[si].sum + " " + si +
                " (with " + count[si].nb + " items)\n";
            nbTotal += count[si].nb;
        }
        text += "\nTotal (" + nbTotal + " items):\n"
        text += breakdown;
        text += '\n\n[span color="#c44312"]This shop has been generated with poe-stash {{ Version }}[/span]\n';
        copyStringToClipboard(text);
        openAlert();
        cleanCache();
    }

    function exportShop() {
        var data = JSON.stringify(localStorage);
        let content = "data:text/html;charset=utf-8," + data;
        var encodedUri = encodeURI(content);
        var link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "poe-shop.txt");
        document.body.appendChild(link); // Required for FF
        link.click();
        link.parentNode.removeChild(link);
    }

    function initImport() {
        var shop = document.getElementById('shop-file');
        if (shop != undefined) {
            shop.addEventListener('change', importShop, false);
        }
        var mergebox = document.getElementById('merge');
        if (mergebox != undefined) {
            var value = localStorage.getItem('merge');
            if (value == undefined) {
                value = "true";
            }
            if (value == "true") {
                mergebox.checked = true;
            } else {
                mergebox.checked = false;
            }
        }
    }

    function clearAllPrices() {
        // Clear the local storage.
        localStorage.clear();
        // Hide all thumbnails.
        var items = document.getElementsByClassName('newItemContainer');
        for (var i = 0; i < items.length; i++) {
            var thumbnail = document.getElementById(items[i].id + '-currency');
            if (thumbnail != undefined) {
                thumbnail.style.display = 'none';
            }
        }
    }

    function importShop(evt) {
        // Check for the various File API support.
        if (!window.File || !window.FileReader || !window.FileList || !window.Blob) {
            alert('The File APIs are not fully supported in this browser. Import is not possible!');
            return;
        }

        var files = evt.target.files;
        var output = [];
        for (var i = 0, f; f = files[i]; i++) {
            // Only process text files.
            if (!f.type.match('text.*')) {
                continue;
            }

            var reader = new FileReader();
            // Closure to capture the file information.
            reader.onload = (function(theFile) {
                return function(e) {
                    var rawDataFile = e.target.result;
                    var data = JSON.parse(rawDataFile);
                    if (data != "") {
                        // Check if we merge or replace content.
                        var mergeData = localStorage.getItem('merge');
                        if (mergeData == undefined) {
                            mergeData = "true";
                        }
                        if (mergeData !== "true") {
                            clearAllPrices();
                            localStorage.setItem('merge', mergeData);
                        }

                        // Import all prices.
                        Object.keys(data).forEach(function (k) {
                            localStorage.setItem(k, data[k]);
                            updateCurrencyThumbnail(k);
                        });
                    }
                };
            })(f);

            reader.readAsText(f);
        }
    }

    // Search for all item currently not there
    function cleanCache() {
        // Retrieve all sellable objects
        var dict = {}
        var items = document.getElementsByClassName('newItemContainer');
        for (var i = 0; i < items.length; i++) {
            dict[items[i].id] = true;
        }
        // Remove all item in storage not present on the page
        for (var key in window.localStorage) {
            if (window.localStorage.hasOwnProperty(key) && document.getElementById(key) == undefined) {
                setPriceNote(key, '');
            }
        }
    }

    function openAlert() {
        var confirm = document.getElementById('confirm');
        if (confirm != undefined) {
            confirm.className = 'box openAnimation';
        }
    }

    function closeAlert() {
        var confirm = document.getElementById('confirm');
        if (confirm != undefined) {
            confirm.className = 'box closeAnimation';
        }
    }

    function redirectToGen(account, poeSessid, league, realm) {
        openWaitModal();
        var link = "/gen/" + account;
        if (poeSessid != "") {
            link += "?poesessid=" + poeSessid;
        }
        if (league != "") {
            link += "?realm=" + realm;
        }
        if (realm != "") {
            link += "?league=" + league;
        }
        window.location.href = link;
    }

    function refresh(account) {
        redirectToGen(account, '', '', '');
    }

    function validateForm(account, poesessid) {
        var errbox = document.getElementById('errbox');
        var account = document.getElementById('account');
        var no_account = document.getElementById('no-account');
        var poesessid = document.getElementById('poesessid');
        var no_sess = document.getElementById('no-sess');
        var invalid_sess = document.getElementById('invalid-sess');
        var submit_btn = document.getElementById('submit-btn');
        var errorOccured  = false;

        if (account.value == "") {
            account.classList.add('input-error');
            no_account.classList.remove('hidden');
            errorOccured  = true;
        } else {
            account.classList.remove('input-error');
            no_account.classList.add('hidden');
        }
        if (poesessid.value == "") {
            poesessid.classList.add('input-error');
            no_sess.classList.remove('hidden');
            errorOccured  = true;
        } else {
            poesessid.classList.remove('input-error');
            no_sess.classList.add('hidden');

            if (!/^[,a-zA-Z0-9-]{1,128}$/.test(poesessid.value)) {
                poesessid.classList.add('input-error');
                invalid_sess.classList.remove('hidden');
                errorOccured  = true;
            } else {
                poesessid.classList.remove('input-error');
                invalid_sess.classList.add('hidden');
            }
        }

        if (errorOccured) {
            errbox.classList.remove('hidden');
            submit_btn.disabled = true;
            return false;
        }

        errbox.classList.add('hidden');
        submit_btn.disabled = false;
        return true;
    }

    function formatSubmit() {
        var account = document.getElementById('account');
        if (account == undefined) {
            console.log("Can't get account!");
            return;
        }
        var poesessid = document.getElementById('poesessid');
        if (poesessid == undefined) {
            console.log("Can't get poesessid!");
            return;
        }
        var league = document.getElementById('league');
        if (league == undefined) {
            console.log("Can't get league!");
            return;
        }
        var realm = document.getElementById('realm');
        if (realm == undefined) {
            console.log("Can't get realm!");
            return;
        }

        // Check validity
        if (!validateForm()) {
            return;
        }

        redirectToGen(account.value,
            poesessid.value,
            league.options[league.selectedIndex].value,
            realm.options[realm.selectedIndex].value);
    }

    function itemIsForSale(id) {
        // Check if item has a price attached to it.
        var currency = document.getElementById(id + '-currency');
        if (currency.style.display != 'none') {
            return true;
        }

        // Check if item has a price set in game with a premium tab.
        var item = document.getElementById(id);
        var desc = item.getAttribute("data-premium-price");
        if (desc != undefined && desc != "" ) {
            return true;
        }

        // No price found anywhere.
        return false;
    }

    function highlightItems(highlightType) {
        var items = document.getElementsByClassName('newItemContainer');
        // Retrieve all sellable objects
        for (var i = 0; i < items.length; i++) {
            var id = items[i].id;
            var currency = document.getElementById(id + '-currency');
            if (currency != undefined) {
                switch (highlightType) {
                    case 'all':
                        items[i].style.opacity = 1.0;
                        break;
                    case 'sell':
                        if (itemIsForSale(id)) {
                            items[i].style.opacity = 1.0;
                        } else {
                            items[i].style.opacity = 0.3;
                        }
                        break;
                    case 'noprice':
                        if (!itemIsForSale(id)) {
                            items[i].style.opacity = 1.0;
                        } else {
                            items[i].style.opacity = 0.3;
                        }
                        break;
                }
            }
        }
    }

    function onMergeChange(elt) {
        var mergebox = document.getElementById('merge');
        // Remember value for next opening.
        localStorage.setItem('merge', mergebox.checked);
    }

    initImport();
    initModal();
    </script>
{{ end }}
